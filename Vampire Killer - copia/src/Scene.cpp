#include "Scene.h"
#include <stdio.h>
#include "Globals.h"
#include "EnemyManager.h"

Scene::Scene()
{
	player = nullptr;
    level = nullptr;
	game_over = nullptr;
	hud = nullptr;
	chest_animation = nullptr;

	currentLevel = 0;
	currentFloor = 0;
	camera.target = { 0, 0 };				//Center of the screen
	camera.offset = { SIDE_MARGINS, TOP_MARGIN };	//Offset from the target (center of the screen)
	camera.rotation = 0.0f;					//No rotation
	camera.zoom = 1.0f;						//Default zoom

	deathExecuted = false;
	renderingGameOver = false;
	level6WallBroken = false;

	font = nullptr;

	debug = DebugMode::OFF;

	chest_time = 90;
	enemy_delay_time = 120;
}
Scene::~Scene()
{
	if (player != nullptr)
	{
		player->Release();
		delete player;
		player = nullptr;
	}
    if (level != nullptr)
    {
		level->Release();
        delete level;
        level = nullptr;
    }
	for (Entity* obj : objects)
	{
		delete obj;
	}
	if (font != nullptr)
	{
		delete font;
		font = nullptr;
	}
}
AppStatus Scene::Init()
{
	ResourceManager& data = ResourceManager::Instance();

	//Create player
	player = new Player({ 20,144 }, State::IDLE, Look::RIGHT);
	EnemyManager::Instance().target = player;
	if (player == nullptr)
	{
		LOG("Failed to allocate memory for Player");
		return AppStatus::ERROR;
	}
	//Initialise player
	if (player->Initialise() != AppStatus::OK)
	{
		LOG("Failed to initialise Player");
		return AppStatus::ERROR;
	}

	//Create level 
    level = new TileMap();
    if (level == nullptr)
    {
        LOG("Failed to allocate memory for Level");
        return AppStatus::ERROR;
    }
	//Initialise level
	if (level->Initialise() != AppStatus::OK)
	{
		LOG("Failed to initialise Level");
		return AppStatus::ERROR;
	}
	//Load level
	if (LoadLevel(1,currentFloor) != AppStatus::OK)
	{
		LOG("Failed to load Level 1");
		return AppStatus::ERROR;
	}
	//Assign the tile map reference to the player to check collisions while navigating
	player->SetTileMap(level);
	EnemyManager::Instance().SetTilemap(level);

	//Add the Game Over image for the end
	if (data.LoadTexture(Resource::IMG_GAME_OVER, "images/Spritesheets/HUD Spritesheet/GameOver.png") != AppStatus::OK)
	{
		return AppStatus::ERROR;
	}
	game_over = data.GetTexture(Resource::IMG_GAME_OVER);

	//Add the Hud image for the top
	if (data.LoadTexture(Resource::IMG_HUD, "images/Spritesheets/HUD Spritesheet/EmptyHUD.png") != AppStatus::OK)
	{
		return AppStatus::ERROR;
	}
	hud = data.GetTexture(Resource::IMG_HUD);

	//Add the chest animation
	if (data.LoadTexture(Resource::IMG_OPEN_CHEST, "images/Spritesheets/FX/OpenChest.png") != AppStatus::OK)
	{
		return AppStatus::ERROR;
	}
	chest_animation = data.GetTexture(Resource::IMG_OPEN_CHEST);

	AudioPlayer::Instance().CreateMusic("audio/Music/02 Vampire Killer.ogg", "VampireKiller");
	AudioPlayer::Instance().SetMusicLoopStatus("VampireKiller",true);

	AudioPlayer::Instance().CreateSound("audio/SFX/01.wav", "Collect");
	AudioPlayer::Instance().CreateSound("audio/SFX/25.wav", "OpenChest");

	player->weapon->SetWeapon(WeaponType::WHIP);

	//Create text font 1
	font = new Text();
	if (font == nullptr)
	{
		LOG("Failed to allocate memory for font 1");
		return AppStatus::ERROR;
	}
	//Initialise text font 1
	if (font->Initialise(Resource::IMG_FONT, "images/Spritesheets/HUD Spritesheet/Font.png", ' ', 8) != AppStatus::OK)
	{
		LOG("Failed to initialise Level");
		return AppStatus::ERROR;
	}

    return AppStatus::OK;
}
AppStatus Scene::LoadLevel(int stage,int floor)
{
	int size;
	int x, y, i;
	Tile tile;
	Point pos;
	int *mapBack = nullptr;
	int *map = nullptr;
	int *mapFront = nullptr;
	//Object *obj = nullptr;
	Object* obj;
	
	ClearLevel();

	size = LEVEL_WIDTH * LEVEL_HEIGHT;
	if (stage == 1 && floor == 0)
	{
		currentLevel = 1;
		currentFloor = 0;
		mapBack = new int[size] {
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  1,  2,  3,  4,  1,  2,  3,  4,  1,  2,  3,  4,  1,  2,  3,  4,  0,
			  0,  5,  6,  7,  8,  5,  6,  7,  8,  5,  6,  7,  8,  5,  6,  7,  8,  0,
			  0,  9, 10, 11, 12,  9, 10, 11, 12,  9, 10, 11, 12,  9, 10, 11, 12,  0,
			  0, 13, 14, 15, 16, 13, 14, 15, 16, 13, 14, 15, 16, 13, 14, 15, 16,  0,
			  0, 17, 18, 19, 20, 17, 18, 19, 20, 17, 18, 19, 20, 17, 18, 19, 20,  0,
			  0, 21, 22, 23, 24, 25, 26, 27, 28, 21, 26, 27, 28, 25, 26, 27, 28,  0,
			  0, 29, 30, 41, 42, 31, 32, 29, 32, 29, 32, 29, 33, 34, 32, 29, 32,  0,
			  0, 36, 35, 43, 44, 35, 35, 36, 35, 36, 35, 36, 35, 35, 35, 36, 35,  0,
			  0, 37, 37, 45, 46, 38, 37, 37, 37, 37, 37, 37, 37, 38, 37, 37, 37,  0,
			  0, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,  0,
			  0, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
			};
		map = new int[size] {
			550,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			550,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			550,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			550,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			550,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			550,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			550,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			550,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			550,  0,  0,  0,  0,124,  0,  0,  0,  0,  0,  0,  0,124,  0,  0,  0,501,
			550,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			550, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,501,
			  0, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		mapFront = new int[size] {
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		EnemyManager::Instance().DestroyEnemies();
		if (player->isGUIinit == false) {
			player->InitGUI();
		}
	}
	else if (stage == 2 && floor == 0)
	{
		currentLevel = 2;
		currentFloor = 0;
		mapBack = new int[size] {
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  1,  2,  3,  4,  1,  2,  3,  4,  1,  2,  3,  4,  1,  2,  3,  4,  0,
			  0,  5,  6,  7,  8,  5,  6,  7,  8,  5,  6,  7,  8,  5,  6,  7,  8,  0,
			  0,  9, 10, 11, 12,  9, 10, 11, 12,  9, 10, 11, 12,  9, 10, 11, 12,  0,
			  0, 13, 14, 15, 16, 13, 14, 15, 16, 13, 14, 15, 16, 13, 14, 15, 16,  0,
			  0, 17, 18, 19, 20, 17, 18, 19, 20, 17, 18, 19, 20, 17, 18, 19, 20,  0,
			  0, 21, 22, 23, 24, 25, 26, 27, 28, 21, 26, 27, 28, 25, 26, 27, 28,  0,
			  0, 29, 30, 41, 42, 31, 32, 29, 32, 29, 32, 29, 33, 34, 32, 29, 32,  0,
			  0, 36, 35, 43, 44, 35, 35, 36, 35, 36, 35, 36, 35, 35, 35, 36, 35,  0,
			  0, 37, 37, 45, 46, 38, 37, 37, 37, 37, 37, 37, 37, 38, 37, 37, 37,  0,
			  0, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,  0,
			  0, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		map = new int[size] {
			 500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			 500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			 500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			 500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			 500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			 500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			 500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			 500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			 500,  0,  0,  0,  0,124,  0,  0,  0,  0,  0,  0,  0,124,  0,  0,  0,501,
			 500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			 500, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,501,
			   0, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,  0,
			   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		mapFront = new int[size] {
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		EnemyManager::Instance().DestroyEnemies();
		EnemyManager::Instance().SpawnPanther({ 40,143 });
		EnemyManager::Instance().SpawnBat({ 40,120 });
	}
	else if (stage == 3 && floor == 0)
	{
		currentLevel = 3;
		currentFloor = 0;
		mapBack = new int[size] {
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  1,  2,  3,  4,  1,  2,  3,  4,  1,  2, 47, 48, 49, 48, 49, 48,  0,
			  0,  5,  6,  7,  8,  5,  6,  7,  8,  5,  6, 50, 51, 52, 52, 53, 54,  0,
			  0,  9, 10, 11, 12,  9, 10, 11, 12,  9, 10, 55, 56, 57, 58, 53, 59,  0,
			  0, 13, 14, 15, 16, 13, 14, 15, 16, 13, 14, 50, 60, 61, 40, 62, 63,  0,
			  0, 17, 18, 19, 20, 17, 18, 19, 20, 17, 18, 55, 65, 66, 40, 67, 68,  0,
			  0, 21, 22, 23, 24, 25, 26, 27, 28, 21, 26, 50, 60, 61, 40, 62, 63,  0,
			  0, 29, 30, 41, 42, 31, 32, 29, 32, 29, 32, 55, 65, 66, 40, 67, 68,  0,
			  0, 36, 35, 43, 44, 35, 35, 36, 35, 36, 35, 69, 70, 71, 40, 72, 73,  0,
			  0, 37, 37, 45, 46, 38, 37, 37, 37, 37, 37, 69, 70, 71, 40, 72, 73,  0,
			  0, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,  0,
			  0, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		map = new int[size] {
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,  0,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,  0,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,  0,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,  0,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,  0,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,  0,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,  0,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,  0,
			500,  0,  0,  0,  0,124,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,  0,
			500,  0,  0,  0,  0,129,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,  0,
			500, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,  0,
			  0, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		mapFront = new int[size] {
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 62, 63,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 67, 68,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 62, 63,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 67, 68,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 72, 73,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 72, 73,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		EnemyManager::Instance().DestroyEnemies();
	}
	else if (stage == 4 && floor == 0)
	{
		currentLevel = 4;
		currentFloor = 0;
		mapBack = new int[size] {
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0, 74, 75, 82, 83,110,110, 97, 98, 74, 75, 86, 87,110,110,101,102,  0,
			  0, 76, 77, 84, 85,110,110, 99,100, 76, 77, 91,110,110,110,110,110,  0,
			  0, 76, 77, 86, 87,110,110,101,102, 76, 77, 92,110,110,110,110,110,  0,
			  0, 76, 77, 88,110,103,103,110,110, 76, 77, 95, 96,103,103,110,110,  0,
			  0, 76, 77, 89,110,103,103,110,110, 76, 77, 97, 98,103,103,110,110,  0,
			  0, 76, 77, 90,110,103,103,110,110, 76, 77, 99,100,103,103,110,110,  0,
			  0, 76, 77, 90,110,103,103,110,110, 76, 77,101,102,103,103,110,110,  0,
			  0, 76, 77, 91,110,103,103,110,110, 76, 77,110,110,103,103,110,110,  0,
			  0, 76, 77, 92,110,103,103,110,110, 76, 77,110,110,103,103,110,110,  0,
			  0, 80, 81,110,110,110,110,110,110, 80, 81,110,110,110,110,110,110,  0,
			  0,108,109,108,109,108,109,108,109,108,109,108,109,108,109,108,109,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		map = new int[size] {
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,126,  0,  0,  0,126,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			  0,108,109,108,109,108,109,108,109,108,109,108,109,108,109,108,109,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		mapFront = new int[size] {
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		EnemyManager::Instance().DestroyEnemies();
	}
	else if (stage == 5 && floor == 0)
	{
		currentLevel = 5;
		currentFloor = 0;
		mapBack = new int[size] {
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0, 74, 75, 82, 83,110,110, 97, 98,110, 93,  0,  0,110,110,101,102,  0,
			  0, 76, 77, 84, 85,103,103,103,103,110,110,110,  0,  0,110,110,110,  0,
			  0, 76, 77, 86, 87,103,103,103,103,110,110,110, 93,  0,  0,110,110,  0,
			  0, 76, 77, 88,110,103,103,103,103,110,110,110,110,110,  0,  0,110,  0,
			  0, 76, 77, 89,110,103,103,103,103,110,110,  0,  0,  0,  0,  0,  0,  0,
			  0, 76, 77, 90,110, 99,100,110,110,110,  0,  0,110, 74, 75, 95, 96,  0,
			  0, 76, 77, 90,110,101,102,  0,  0,  0,  0, 94,110, 76, 77, 97, 98,  0,
			  0, 76, 77, 91,110,110,  0,  0,110,110,110,110,110, 76, 77, 99,100,  0,
			  0, 78, 77, 92,110,  0,  0, 94,110,110,110,110,110, 76, 77,101,102,  0,
			  0, 80, 81,110,  0,  0,110,110,110,110,110,110,110, 76, 77,110,110,  0,
			  0,108,109,108,109,108,109,108,109,108,109,108,109,108,109,108,109,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		map = new int[size] {
			500,  0,  0,  0,  0,  0,  0,  0,502,502,502,502,502,502,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,105,106,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,105,106,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,126,  0,  0,105,106,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,105,106,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,107,108,108,109,108,109,  0,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,107,104,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,107,108,108,109,550,126,  0,  0,  0,  0,501,
			500,  0,  0,  0,126,  0,107,104,126,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,107,104,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,107,104,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			  0,108,109,108,109,108,109,108,109,108,109,108,109,108,109,108,109,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		mapFront = new int[size] {
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		EnemyManager::Instance().DestroyEnemies();
	}
	else if (stage == 6 && floor == 0)
	{
		currentLevel = 6;
		currentFloor = 0;
		mapBack = new int[size] {
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0, 97, 98, 76, 77, 86, 87,110,110,110,110,110,110,101,102,110,110,  0,
			  0, 99,100, 76, 77, 91,110,110,110,103,103,110,110,110,110,110,110,  0,
			  0,101,102, 76, 77, 92,110,110,110,103,103,110,110,110,110,  0,  0,  0,
			  0,110,110, 80, 81,110,110,110,110,103,103,110,110,110,  0,  0,110,  0,
			  0,  0,  0,  0,  0,  0,  0,110,110,103,103,110,110,  0,  0, 94,110,  0,
			  0,110,110, 74, 75,110,  0,  0,110,110,110,110,  0,  0,110, 95, 96,  0,
			  0,110,110, 76, 77,  0,  0,  0,  0,  0,  0,  0,  0, 94,110, 97, 98,  0,
			  0,110,110, 76, 77, 99,100,  0,  0,  0,  0,110,110,110,110, 99,100,  0,
			  0,110,110, 76, 77,101,102,  0,  0,101,102,110,110,110,110,101,102,  0,
			  0,110,110, 76, 77,110,110,  0,  0,110,110,110,110,110,110,110,110,  0,
			  0,108,109,108,109,108,109,108,109,108,109,108,109,108,109,108,109,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		if (!level6WallBroken) {
			map = new int[size] {
				500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
				500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
				500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
				500,  0,  0,  0,  0,  0,  0,126,  0,  0,  0,  0,126,  0,  0,107,108,  0,
				500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,107,104,  0,501,
				  0,108,109,108,109,108,106,  0,  0,  0,  0,  0,  0,107,104,  0,  0,501,
				500,  0,  0,  0,  0,  0,105,106,  0,  0,  0,  0,107,104,  0,  0,  0,501,
				500,  0,  0,  0,  0,108,109,108,109,108,109,108,109,  0,  0,  0,  0,501,
				500,  0,  0,  0,  0,  0,  0,108,109,108,109,  0,  0,  0,126,  0,  0,501,
				500,  0,  0,  0,  0,  0,  0,108,109,131,132,  0,  0,  0,  0,  0,  0,501,
				500,  0,  0,  0,  0,  0,  0,108,109,131,132,  0,130,  0,  0,  0,  0,501,
				  0,108,109,108,109,108,109,108,109,108,109,108,109,108,109,108,109,  0,
				  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
			};
		}
		else if(level6WallBroken){
			map = new int[size] {
				500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
				500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
				500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
				500,  0,  0,  0,  0,  0,  0,126,  0,  0,  0,  0,126,  0,  0,107,108,  0,
				500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,107,104,  0,501,
				  0,108,109,108,109,108,106,  0,  0,  0,  0,  0,  0,107,104,  0,  0,501,
				500,  0,  0,  0,  0,  0,105,106,  0,  0,  0,  0,107,104,  0,  0,  0,501,
				500,  0,  0,  0,  0,108,109,108,109,108,109,108,109,  0,  0,  0,  0,501,
				500,  0,  0,  0,  0,  0,  0,108,109,108,109,  0,  0,  0,126,  0,  0,501,
				500,  0,  0,  0,  0,  0,  0,108,109,  0,  0,  0,  0,  0,  0,  0,  0,501,
				500,  0,  0,  0,  0,  0,  0,108,109,  0,  0,  0,  0,  0,  0,  0,  0,501,
				  0,108,109,108,109,108,109,108,109,108,109,108,109,108,109,108,109,  0,
				  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
			};
		}
		mapFront = new int[size] {
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		EnemyManager::Instance().DestroyEnemies();
	}
	else if (stage == 7 && floor == 0)
	{
		currentLevel = 7;
		currentFloor = 0;
		mapBack = new int[size] {
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,101,102,110,110,  0,  0, 93,110,110,110, 97, 98, 74, 75, 82, 83,  0,
			  0,110,110,110,  0,  0,110,110,110,110,110, 99,100, 76, 77, 84, 85,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,110,110,101,102, 76, 77, 86, 87,  0,
			  0, 74, 75, 99,100,110,110,110,  0,  0,110,110,110, 76, 77, 88,110,  0,
			  0, 76, 77,101,102,110,110,110, 94,  0,  0,110,110, 76, 77, 89,110,  0,
			  0, 76, 77,110,110,110,110,110,110,110,  0,  0,110, 78, 77, 90,110,  0,
			  0, 76, 77,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 79, 77, 90,110,  0,
			  0, 76, 77,110,110,110,  0,  0,110,110,110, 99,100, 76, 77, 91,110,  0,
			  0, 78, 77,110,110,  0,  0, 94,110,110,110,101,102, 76, 77, 92,110,  0,
			  0, 80, 81,110,  0,  0,110,110,110,110,110,110,110, 80, 81,110,110,  0,
			  0,108,109,108,109,108,109,108,109,108,109,108,109,108,109,108,109,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		map = new int[size] {
			500,  0,  0,  0,502,502,502,502,502,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,107,104,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,107,104,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			  0,108,109,108,109,108,109,108,106,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,105,106,  0,  0,126,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,126,  0,  0,  0,105,106,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,130,  0,  0,  0,  0,  0,105,106,  0,  0,  0,  0,  0,501,
			500,  0,  0,108,109,108,109,107,108,108,109,108,109,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,107,104,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,126,  0,107,104,  0,  0,126,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,107,104,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			  0,108,109,108,109,108,109,108,109,108,109,108,109,108,109,108,109,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		mapFront = new int[size] {
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		EnemyManager::Instance().DestroyEnemies();
	}
	else if (stage == 4 && floor == 1)
	{
		currentLevel = 4;
		currentFloor = 1;
		mapBack = new int[size] {
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,110,110, 74, 75,110,110,110,110,110,110,101,102, 74, 75,  0,
			  0,  0,  0,110,110, 76, 77,110,110,110,110,110,110, 95, 96, 76, 77,  0,
			  0,  0,  0,  0,  0, 76, 77,  0,  0,  0,  0,110,110, 97, 98, 76, 77,  0,
			  0,  0,  0,110,110, 76, 77, 99,100,110,  0,  0,110, 99,100, 76, 77,  0,
			  0,  0,  0,110,110, 76, 77,101,102,110, 93,  0,  0,101,102, 76, 77,  0,
			  0,  0,  0,110,110, 76, 77,110,110, 95, 96,110,  0,  0,110, 76, 77,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0, 97, 98,110, 93,  0,  0,  0,  0,  0,
			  0,  0,  0, 99,100, 74, 75,110,110, 99,100,110,110,110,110, 74, 75,  0,
			  0,  0,  0,101,102, 76, 77,110,110,101,102,110,110,110,110, 76, 77,  0,
			  0,  0,  0,110,110, 80, 81,110,110,110,110,110,110,110,110, 80, 81,  0,
			  0,108,109,108,109,108,109,108,109,108,109,108,109,108,109,108,109,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		map = new int[size] {
			  0,550,550,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			  0,108,109,  0,126,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			  0,108,109,130,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			  0,108,109,108,109,  0,  0,108,109,108,106,  0,126,  0,  0,  0,  0,501,
			  0,108,109,  0,  0,  0,  0,  0,  0,  0,105,106,  0,  0,  0,  0,  0,501,
			  0,108,109,  0,126,  0,  0,  0,  0,  0,  0,105,106,  0,  0,  0,  0,501,
			  0,108,109,130,  0,  0,  0,  0,  0,  0,  0,  0,105,106,  0,  0,  0,501,
			  0,108,109,108,109,108,109,108,109,  0,  0,  0,  0,108,109,108,109,501,
			  0,108,109,  0,  0,  0,  0,126,  0,  0,  0,126,  0,  0,  0,  0,  0,501,
			  0,108,109,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			  0,108,109,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			  0,108,109,108,109,108,109,108,109,108,109,108,109,108,109,108,109,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		mapFront = new int[size] {
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		EnemyManager::Instance().DestroyEnemies();
	}
	else if (stage == 5 && floor == 1)
	{
		currentLevel = 5;
		currentFloor = 1;
		mapBack = new int[size] {
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,110,110, 74, 75, 86, 87,110,110, 97, 98,110,110, 74, 75, 82, 83,  0,
			  0, 95, 96, 76, 77, 88,110,103,103,103,103,110,110, 76, 77, 84, 85,  0,
			  0, 97, 98, 76, 77, 90,110,103,103,103,103,110,110, 76, 77, 86, 87,  0,
			  0, 99,100, 76, 77, 91,110,103,103,103,103,110,110, 76, 77, 88,110,  0,
			  0,101,102, 78, 77, 92,110,103,103,103,103,110,110, 76, 77, 89,110,  0,
			  0,110,110, 80, 81,110,110, 99,100,110,110, 95, 96, 76, 77, 91,110,  0,
			  0,  0,  0,  0,  0,  0,  0,101,102,110,110, 97, 98, 76, 77, 92,110,  0,
			  0,110,110, 99,100,110,  0,  0,110,110,110, 99,100, 78, 77,110,110,  0,
			  0,110,110,101,102,110, 93,  0,  0,110,110,101,102, 79, 77,110,110,  0,
			  0,110,110,110,110,110,110,110,  0,  0,110,110,110, 80, 81,110,110,  0,
			  0,108,109,108,109,108,109,108,109,108,109,108,  0,108,109,108,109,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		map = new int[size] {
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,108,109,108,109,108,106,  0,  0,  0,126,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,126,105,106,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,105,106,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,105,106,  0,  0,  0,  0,  0,  0,  0,501,
			500,108,109,108,109,108,109,108,109,108,109,108,106,108,109,108,109,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,503,503,503,  0,  0,  0,  0
		};
		mapFront = new int[size] {
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		EnemyManager::Instance().DestroyEnemies();
	}
	else if (stage == 6 && floor == 1)
	{
		currentLevel = 6;
		currentFloor = 1;
		mapBack = new int[size] {
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,110,110,101,102, 74, 75, 82, 83,110,110, 97, 98,110,110, 97, 98,  0,
			  0, 95, 96,110,110, 76, 77, 84, 85,110,110,103,103,110,110,103,103,  0,
			  0, 97, 98,110,110, 76, 77, 86, 87,110,110,103,103,110,110,103,103,  0,
			  0,103,103,110,110, 76, 77, 88,110, 95, 96,103,103,110,110,103,103,  0,
			  0,103,103,110,110, 76, 77, 89,110, 97, 98,103,103,110,110,103,103,  0,
			  0,103,103, 95, 96, 76, 77, 90,110, 99,100,110,110,110,110,110,110,  0,
			  0,103,103, 97, 98, 76, 77, 90,110,101,102,  0,  0,  0,  0,  0,  0,  0,
			  0,103,103, 99,100, 76, 77, 91,110,110,  0,  0,110, 99,100,110,110,  0,
			  0,103,103,101,102, 76, 77, 92,110,  0,  0, 94,110,101,102,110,110,  0,
			  0,110,110,110,110, 80, 81,110,  0,  0,110,110,110,110,110,110,110,  0,
			  0,108,109,108,109,108,109,108,109,108,109,108,109,108,109,108,109,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		map = new int[size] {
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,126,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,126,  0,  0,107,109,108,109,108,109,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,107,104,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,107,104,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,107,104,  0,  0,  0,  0,  0,  0,  0,501,
			500,108,109,108,109,108,109,108,109,108,109,108,109,108,109,108,109,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		mapFront = new int[size] {
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		EnemyManager::Instance().DestroyEnemies();
	}
	else if (stage == 7 && floor == 1)
	{
		currentLevel = 7;
		currentFloor = 1;
		mapBack = new int[size] {
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0, 74, 75, 82, 83,110,110, 97, 98,110,110,110,110, 97, 98,  0,  0,  0,
			  0, 76, 77, 84, 85, 95, 96,103,103,110,110,110,110, 99,100,  0,  0,  0,
			  0, 76, 77, 86, 87, 97, 98,103,103,110,110,110,110,101,102,  0,  0,  0,
			  0, 78, 77, 91,110, 99,100,103,103,110,110,110,110,110,110,  0,  0,  0,
			  0, 79, 77, 92,110,101,102,103,103,110,110,  0,  0,  0,  0,  0,  0,  0,
			  0, 76, 77,110,110,110,110,110,110,110,  0,  0,110, 95, 96,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 94,110, 97, 98,  0,  0,  0,
			  0, 74, 75, 99,100,110,110,110,110, 99,100,110,110, 99,100,  0,  0,  0,
			  0, 76, 77,101,102,110,110,110,110,101,102,110,110,101,102,  0,  0,  0,
			  0, 80, 81,110,110,110,110,110,110,110,110,110,110,110,110,  0,  0,  0,
			  0,108,109,108,109,  0,109,108,109,108,109,108,109,108,109,108,109,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		map = new int[size] {
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,108,109,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,107,109,108,109,108,109,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,107,104,  0,  0,  0,108,109,501,
			500,108,109,108,109,108,109,108,109,108,109,  0,  0,  0,  0,108,109,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,108,109,501,
			500,  0,  0,  0,  0,  0,  0,126,  0,  0,  0,126,  0,  0,  0,108,109,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,108,109,501,
			500,108,109,108,109,107,109,108,109,108,109,108,109,108,109,108,109,  0,
			  0,  0,  0,  0,503,503,503,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		mapFront = new int[size] {
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		EnemyManager::Instance().DestroyEnemies();
	}
	else if (stage == 8 && floor == 1)
	{
		currentLevel = 8;
		currentFloor = 1;
		mapBack = new int[size] {
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,111,111, 74, 75,111,113,111,111, 74, 75,111,111,111,111, 74, 75,  0,
			  0,123,123, 78, 77,123,123,123,123, 76, 77,123,123,123,123, 76, 77,  0,
			  0,123,123, 79, 77,123,123,123,123, 76, 77,123,123,123,123, 76, 77,  0,
			  0,123,123, 76, 77,123,123,123,123, 78, 77,123,123,123,123, 76, 77,  0,
			  0,123,123, 76, 77,123,123,123,123, 79, 77,123,123,123,123, 76, 77,  0,
			  0,111,112, 76, 77,111,112,111,118, 76, 77,117,111,111,118, 76, 77,  0,
			  0,111,113, 76, 77,111,113,111,111, 76, 77,111,111,  0,  0,  0,  0,  0,
			  0,114,115, 76, 77,114,115,114,115, 76, 77,111,  0,  0,111, 76, 77,  0,
			  0,  0,116, 78, 77,  0,116,  0,116, 76, 77,  0,  0,111,111, 78, 77,  0,
			  0,111,118, 80, 81,117,111,111,111, 80, 81,117,111,111,118, 80, 81,  0,
			  0,108,109,108,109,108,109,108,109,108,109,108,109,108,109,108,109,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		map = new int[size] {
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,126,  0,  0,126,  0,119,109,108,109,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,119,121,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,108,109,  0,  0,  0,  0,501,
			500,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,501,
			500,108,109,108,109,108,109,108,109,108,109,108,109,108,109,108,109,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		mapFront = new int[size] {
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
			  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
		};
		EnemyManager::Instance().DestroyEnemies();
	}
	else
	{
		//Error level doesn't exist or incorrect level number
		LOG("Failed to load level, stage %d doesn't exist", stage);
		return AppStatus::ERROR;	
	}

	//Entities and objects
	i = 0;
	for (y = 0; y < LEVEL_HEIGHT; ++y)
	{
		for (x = 0; x < LEVEL_WIDTH; ++x)
		{
			tile = (Tile)mapBack[i];
			if (tile == Tile::EMPTY)
			{
				mapBack[i] = 0;
			}
			else if (tile == Tile::PLAYER)
			{
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				player->SetPos(pos);
				mapBack[i] = 0;
			}
			

			++i;
		}
	}
	i = 0;
	for (y = 0; y < LEVEL_HEIGHT; ++y)
	{
		for (x = 0; x < LEVEL_WIDTH; ++x)
		{
			tile = (Tile)map[i];
			if (tile == Tile::EMPTY)
			{
				map[i] = 0;
			}
			else if (tile == Tile::PLAYER)
			{
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				player->SetPos(pos);
				map[i] = 0;
			}
			else if (tile == Tile::CHAIN)
			{
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::CHAIN);
				objects.push_back(obj);
				map[i] = 0;
			}
			else if (tile == Tile::CHEST_CHAIN)
			{
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::CHEST_CHAIN);
				objects.push_back(obj);
				map[i] = 0;
			}
			++i;
		}
	}
	i = 0;
	for (y = 0; y < LEVEL_HEIGHT; ++y)
	{
		for (x = 0; x < LEVEL_WIDTH; ++x)
		{
			tile = (Tile)mapFront[i];
			if (tile == Tile::EMPTY)
			{
				mapFront[i] = 0;
			}
			else if (tile == Tile::PLAYER)
			{
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				player->SetPos(pos);
				mapFront[i] = 0;
			}
			++i;
		}
	}
	//Tile map
	level->Load(map, mapFront, mapBack,LEVEL_WIDTH, LEVEL_HEIGHT);
	delete[] map;
	delete[] mapFront;
	delete[] mapBack;
	return AppStatus::OK;
}
void Scene::Update()
{
	Point p1, p2;
	AABB box;
	Point left_position(16+3, player->GetPos().y);
	Point right_position(256-3, player->GetPos().y);
	Point top_position(player->GetPos().x, 48);
	Point bottom_position(player->GetPos().x, 100);

	EnemyManager::Instance().SetTilemap(level);

	//Switch between the different debug modes: off, on (sprites & hitboxes), on (hitboxes) 
	if (IsKeyPressed(KEY_F2))
	{
		debug = (DebugMode)(((int)debug + 1) % (int)DebugMode::SIZE);
	}
	//Debug levels instantly

	AudioPlayer::Instance().PlayMusicByName("VampireKiller");

	if (IsKeyPressed(KEY_ONE))			LoadLevel(1,0);
	else if (IsKeyPressed(KEY_TWO))		LoadLevel(2,0);
	else if (IsKeyPressed(KEY_THREE))	LoadLevel(3,0);
	else if (IsKeyPressed(KEY_FOUR))	LoadLevel(4,0);
	else if (IsKeyPressed(KEY_FIVE))	LoadLevel(5,0);
	else if (IsKeyPressed(KEY_SIX))		LoadLevel(6,0);
	else if (IsKeyPressed(KEY_SEVEN))	LoadLevel(7,0);
	else if (IsKeyPressed(KEY_EIGHT))	LoadLevel(4,1);
	else if (IsKeyPressed(KEY_NINE))	LoadLevel(5,1);
	else if (IsKeyPressed(KEY_ZERO))	LoadLevel(8,1);

	else if (IsKeyPressed(KEY_C))		player->weapon->SetWeapon(WeaponType::CHAIN);
	else if (IsKeyPressed(KEY_F3)) {
		AudioPlayer::Instance().StopMusicByName("VampireKiller");
		player->Win();
	}
	else if (IsKeyPressed(KEY_F1))	    player->GodModeSwitch();
	else if (IsKeyPressed(KEY_F4) || player->GetLife() == 0)
	{
		if (!player->IsGodMode() && player->GetState() != State::DYING) {
			player->StartDying();
		}
	}
	else if (IsKeyPressed(KEY_F5))
	{
		if (!player->IsGodMode()) {
			player->DecrLife(1);
		}
	}


	box = player->GetHitbox();

	AudioPlayer::Instance().Update();

	if (level->TestCollisionRight(box))
	{
		if (currentLevel == 7 && currentFloor == 1)
		{
			LoadLevel(8, currentFloor);
			player->SetPos(left_position);
		}
		else if (currentLevel == 7) {
			LoadLevel(4,currentFloor);
			player->SetPos(left_position);
		}
		else {
			LoadLevel(currentLevel + 1,currentFloor);
			player->SetPos(left_position);
		}

	}
	else if (level->TestCollisionLeft(box)) {
		if (currentLevel <= 3) {
			LoadLevel(currentLevel - 1,currentFloor);
			player->SetPos(right_position);
		}
		else if (currentLevel == 4) {
			LoadLevel(7,currentFloor);
			player->SetPos(right_position);
		}
		else if (currentLevel > 4) {
			LoadLevel(currentLevel - 1,currentFloor);
			player->SetPos(right_position);
		}
	}

	else if (level->TestCollisionTop(box)) {
		LoadLevel(currentLevel, currentFloor + 1);
		player->SetPos(bottom_position);
	}
	else if (level->TestCollisionBottom(box)) {
		LoadLevel(currentLevel, currentFloor - 1);
		player->SetPos(top_position);
	}


	if (level->TestCollisionWin(box)) {
		AudioPlayer::Instance().StopMusicByName("VampireKiller");
		player->Win();
	}

	EnemyManager::Instance().SetTilemap(level);

	if (chestOpening) {
		Object* obj;
		chest_time--;

		// PLAY ANIMATION
		if (chest_time == 0) {
			if (currentChestType == ObjectType::CHEST_CHAIN) {

				obj = new Object({ (int)currentChestX,(int)currentChestY }, ObjectType::CHAIN);
				objects.push_back(obj);
				chest_time = 90;
				chestOpening = false;
			}
		}
	}

	enemy_delay_time--;
	if (enemy_delay_time < 0) {
		if (currentFloor == 0) {
			if (currentLevel == 4 || currentLevel == 5) {
				EnemyManager::Instance().SpawnZombie({ 236,175 });
				enemy_delay_time = 120;
			}
		}
		if (currentFloor == 1) {
			if (currentLevel == 5) {
				EnemyManager::Instance().SpawnZombie({ 236,175 });
				enemy_delay_time = 120;
			}
		}
	}

	if (player->weapon->GetFrame() == 2) {
		if (level->TestCollisionBreakableBrick(player->weapon->HitboxOnAttack())) {	
			level->TurnIntoAir();
			level6WallBroken = true;
		}
	}

	level->Update();
	EnemyManager::Instance().SetTilemap(level);
	EnemyManager::Instance().Update();
	player->Update();
	CheckCollisions();
}
void Scene::Render()
{
	BeginMode2D(camera);
	if (!player->IsDead()) {
		level->RenderEarly();

		level->Render();
		if (debug == DebugMode::OFF || debug == DebugMode::SPRITES_AND_HITBOXES)
		{
			RenderObjects(); 
			EnemyManager::Instance().Render();
			player->Draw();
			player->weapon->Draw();
		}
		if (debug == DebugMode::SPRITES_AND_HITBOXES || debug == DebugMode::ONLY_HITBOXES)
		{
			RenderObjectsDebug(YELLOW);
			EnemyManager::Instance().RenderDebug();
			player->DrawDebug(GREEN);
			player->weapon->DrawDebug(RED);

		}
		level->RenderLate();

		if (chestOpening) {
			if (chest_time % 30 < 8) {
				DrawTextureRec(*chest_animation, { 0,0,16,16 }, { currentChestX, currentChestY-16 }, WHITE);
			}
			else if (chest_time % 30 < 16) {
				DrawTextureRec(*chest_animation, { 16 * 1,0,16,16 }, { currentChestX, currentChestY-16  }, WHITE);
			}
			else if (chest_time % 30 < 23) {
				DrawTextureRec(*chest_animation, { 16 * 2,0,16,16 }, { currentChestX, currentChestY-16  }, WHITE);
			}
			else if (chest_time % 30 < 30) {
				DrawTextureRec(*chest_animation, { 16 * 3,0,16,16 }, { currentChestX, currentChestY-16  }, WHITE);
			}
		}

		deathExecuted = false;
	}
	else if(player->IsDead() && deathExecuted == false){
		if (player->GetLives() <= 0) {
			AudioPlayer::Instance().StopMusicByName("VampireKiller");
			renderingGameOver = true;
			deathExecuted = true;
		}
		else {
			player->DecrLives(1);
			deathExecuted = true;
			AudioPlayer::Instance().StopMusicByName("VampireKiller");
			
			player->SetPos({ 20,140 });
			player->SetState(State::IDLE);
			player->weapon->SetWeapon(WeaponType::WHIP);
			player->SetLook(Look::RIGHT);
			player->InitLife();

			LoadLevel(1,currentFloor);
		}
	}

	if (renderingGameOver) {
		RenderGameOver();
	}

	EndMode2D();

	if (debug == DebugMode::SPRITES_AND_HITBOXES || debug == DebugMode::ONLY_HITBOXES) {
		if (player->IsGodMode()) {
			DrawText("GOD MODE : ON", 10, 30, 8, LIGHTGRAY);
		}
		else {
			DrawText("GOD MODE : OFF", 10, 30, 8, LIGHTGRAY);
		}
	}

	DrawTexture(*hud, 0, 0, WHITE);

	RenderGUI();
}
void Scene::Release()
{
	ResourceManager& data = ResourceManager::Instance();
	data.ReleaseTexture(Resource::IMG_GAME_OVER);

	data.ReleaseTexture(Resource::IMG_HUD);

	data.ReleaseTexture(Resource::IMG_OPEN_CHEST);

    level->Release();
	player->Release();
	ClearLevel();
}
bool Scene::PlayerIsDead() const {
	if (player->GetLives() <= 0) {
		return player->IsDead();
	}
	else {
		return false;
	}
}
bool Scene::PlayerHasWon() const {
	return player->HasWon();
}
void Scene::CheckCollisions()
{
	AABB player_box, obj_box;
	
	player_box = player->GetHitbox();
	auto it = objects.begin();
	while (it != objects.end())
	{
		obj_box = (*it)->GetHitbox();
		if(player_box.TestAABB(obj_box))
		{
			//AudioPlayer::Instance().PlaySoundByName("Collect");

			if ((*it)->GetType() == ObjectType::CHAIN) {
				AudioPlayer::Instance().PlaySoundByName("Collect");
				player->weapon->SetWeapon(WeaponType::CHAIN);
				//Delete the object
				delete* it;
				//Erase the object from the vector and get the iterator to the next valid element
				it = objects.erase(it);
			}
			else if ((*it)->GetType() == ObjectType::CHEST_CHAIN) {
				if (player->HasChestKey()) {
					chestOpening = true;
					currentChestType = ObjectType::CHEST_CHAIN;
					currentChestX = (float)(*it)->GetPos().x;
					currentChestY = (*it)->GetPos().y;
					AudioPlayer::Instance().PlaySoundByName("OpenChest");
					//Delete the object
					delete* it;
					//Erase the object from the vector and get the iterator to the next valid element
					it = objects.erase(it);
				}
				else {
					++it;
				}
			}
			else {
				//Delete the object
				delete* it;
				//Erase the object from the vector and get the iterator to the next valid element
				it = objects.erase(it);
			}
		}
		else
		{
			//Move to the next object
			++it; 
		}
	}
}
void Scene::ClearLevel()
{
	for (Object* obj : objects)
	{
		delete obj;
	}
	objects.clear();
}
void Scene::RenderObjects() const
{
	for (Object* obj : objects)
	{
		obj->Draw();
	}
}
void Scene::RenderObjectsDebug(const Color& col) const
{
	for (Object* obj : objects)
	{
		obj->DrawDebug(col);
	}
}
void Scene::RenderGUI() const
{
	font->Draw(65, 14, TextFormat("%06d", player->GetScore()), WHITE);
	
	if (currentLevel <= 3) {
		font->Draw(165, 14, "00", WHITE);
	}
	else if (currentLevel > 3) {
		font->Draw(165, 14, "01", WHITE);
	}

	if (player->GetLives() >= 0) {
		font->Draw(237, 14, TextFormat("%02d", player->GetLives()), WHITE);
	}
	else {
		font->Draw(237, 14, "00", WHITE);
	}

	if (player->GetHearts() >= 0) {
		font->Draw(201, 14, TextFormat("%02d", player->GetHearts()), WHITE);
	}
	else {
		font->Draw(201, 14, "00", WHITE);
	}

	if (player->GetLife() > 0) {
		DrawRectangle(68, 28, player->GetLife() * 4, 4, { 247, 176, 144, 255 });
	}

	DrawRectangle(68, 37, player->GetLife() * 4, 4, { 176, 6, 6, 255 });

}
void Scene::RenderGameOver() const
{
	DrawTexture(*game_over, 16, 0, WHITE);
}